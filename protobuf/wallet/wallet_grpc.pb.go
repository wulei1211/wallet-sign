// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protobuf/wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_GetSupportSignType_FullMethodName                = "/theweb3.wallet.WalletService/getSupportSignType"
	WalletService_CreateKeyPairsExportPublicKeyList_FullMethodName = "/theweb3.wallet.WalletService/createKeyPairsExportPublicKeyList"
	WalletService_SignMessageSignature_FullMethodName              = "/theweb3.wallet.WalletService/signMessageSignature"
	WalletService_SignBatchMessageSignature_FullMethodName         = "/theweb3.wallet.WalletService/signBatchMessageSignature"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetSupportSignType(ctx context.Context, in *SupportSignRequest, opts ...grpc.CallOption) (*SupportSignResponse, error)
	CreateKeyPairsExportPublicKeyList(ctx context.Context, in *CreateKeyPairAndExportPublicKeyRequest, opts ...grpc.CallOption) (*CreateKeyPairAndExportPublicKeyResponse, error)
	SignMessageSignature(ctx context.Context, in *SignMessageSignatureRequest, opts ...grpc.CallOption) (*SignMessageSignatureResponse, error)
	SignBatchMessageSignature(ctx context.Context, in *SignBatchMessageSignatureRequest, opts ...grpc.CallOption) (*SignBatchMessageSignatureResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetSupportSignType(ctx context.Context, in *SupportSignRequest, opts ...grpc.CallOption) (*SupportSignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportSignResponse)
	err := c.cc.Invoke(ctx, WalletService_GetSupportSignType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateKeyPairsExportPublicKeyList(ctx context.Context, in *CreateKeyPairAndExportPublicKeyRequest, opts ...grpc.CallOption) (*CreateKeyPairAndExportPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyPairAndExportPublicKeyResponse)
	err := c.cc.Invoke(ctx, WalletService_CreateKeyPairsExportPublicKeyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignMessageSignature(ctx context.Context, in *SignMessageSignatureRequest, opts ...grpc.CallOption) (*SignMessageSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignMessageSignatureResponse)
	err := c.cc.Invoke(ctx, WalletService_SignMessageSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignBatchMessageSignature(ctx context.Context, in *SignBatchMessageSignatureRequest, opts ...grpc.CallOption) (*SignBatchMessageSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignBatchMessageSignatureResponse)
	err := c.cc.Invoke(ctx, WalletService_SignBatchMessageSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations should embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	GetSupportSignType(context.Context, *SupportSignRequest) (*SupportSignResponse, error)
	CreateKeyPairsExportPublicKeyList(context.Context, *CreateKeyPairAndExportPublicKeyRequest) (*CreateKeyPairAndExportPublicKeyResponse, error)
	SignMessageSignature(context.Context, *SignMessageSignatureRequest) (*SignMessageSignatureResponse, error)
	SignBatchMessageSignature(context.Context, *SignBatchMessageSignatureRequest) (*SignBatchMessageSignatureResponse, error)
}

// UnimplementedWalletServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) GetSupportSignType(context.Context, *SupportSignRequest) (*SupportSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportSignType not implemented")
}
func (UnimplementedWalletServiceServer) CreateKeyPairsExportPublicKeyList(context.Context, *CreateKeyPairAndExportPublicKeyRequest) (*CreateKeyPairAndExportPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPairsExportPublicKeyList not implemented")
}
func (UnimplementedWalletServiceServer) SignMessageSignature(context.Context, *SignMessageSignatureRequest) (*SignMessageSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessageSignature not implemented")
}
func (UnimplementedWalletServiceServer) SignBatchMessageSignature(context.Context, *SignBatchMessageSignatureRequest) (*SignBatchMessageSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBatchMessageSignature not implemented")
}
func (UnimplementedWalletServiceServer) testEmbeddedByValue() {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetSupportSignType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetSupportSignType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetSupportSignType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetSupportSignType(ctx, req.(*SupportSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateKeyPairsExportPublicKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPairAndExportPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateKeyPairsExportPublicKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateKeyPairsExportPublicKeyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateKeyPairsExportPublicKeyList(ctx, req.(*CreateKeyPairAndExportPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignMessageSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignMessageSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SignMessageSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignMessageSignature(ctx, req.(*SignMessageSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignBatchMessageSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBatchMessageSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignBatchMessageSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SignBatchMessageSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignBatchMessageSignature(ctx, req.(*SignBatchMessageSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "theweb3.wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSupportSignType",
			Handler:    _WalletService_GetSupportSignType_Handler,
		},
		{
			MethodName: "createKeyPairsExportPublicKeyList",
			Handler:    _WalletService_CreateKeyPairsExportPublicKeyList_Handler,
		},
		{
			MethodName: "signMessageSignature",
			Handler:    _WalletService_SignMessageSignature_Handler,
		},
		{
			MethodName: "signBatchMessageSignature",
			Handler:    _WalletService_SignBatchMessageSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/wallet.proto",
}
